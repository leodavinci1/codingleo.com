/* eslint-disable no-shadow */
/* eslint-disable react/prop-types */
/* eslint-disable react/destructuring-assignment */
/* eslint-disable no-unused-vars */
/* eslint-disable react/jsx-props-no-spreading */
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 SmallAirplane.glb --transform 
Files: SmallAirplane.glb [36.2KB] > C:\Users\leo\Documents\projects\leo\codingleo.com\public\models\SmallAirplane-transformed.glb [6.93KB] (81%)
*/

import React, { useRef } from 'react';
import { useGLTF } from '@react-three/drei';
import { SphereGeometry, MeshStandardMaterial } from 'three';
import { useFrame } from '@react-three/fiber';

export function SmallAirplane(props) {
  const { nodes, materials } = useGLTF(
    './models/SmallAirplane-transformed.glb'
  );
  const smoke1 = useRef();
  const smoke2 = useRef();
  const smoke3 = useRef();
  const smoke4 = useRef();

  const scaleFactor = 0.003;
  const positionFactor = 0.03;
  const initialScale = 0.6;
  const initialPosition = 7;
  const resetLimit = 13;

  useFrame(() => {
    smoke1.current.position.z += positionFactor;
    smoke1.current.scale.x -= scaleFactor;
    smoke1.current.scale.y -= scaleFactor;
    smoke1.current.scale.z -= scaleFactor;
    if (smoke1.current.position.z >= resetLimit) {
      smoke1.current.position.z = initialPosition;
      smoke1.current.scale.x = initialScale;
      smoke1.current.scale.y = initialScale;
      smoke1.current.scale.z = initialScale;
    }

    smoke2.current.position.z += positionFactor;
    smoke2.current.scale.x -= scaleFactor;
    smoke2.current.scale.y -= scaleFactor;
    smoke2.current.scale.z -= scaleFactor;
    if (smoke2.current.position.z >= resetLimit) {
      smoke2.current.position.z = initialPosition;
      smoke2.current.scale.x = initialScale;
      smoke2.current.scale.y = initialScale;
      smoke2.current.scale.z = initialScale;
    }

    smoke3.current.position.z += positionFactor;
    smoke3.current.scale.x -= scaleFactor;
    smoke3.current.scale.y -= scaleFactor;
    smoke3.current.scale.z -= scaleFactor;
    if (smoke3.current.position.z >= resetLimit) {
      smoke3.current.position.z = initialPosition;
      smoke3.current.scale.x = initialScale;
      smoke3.current.scale.y = initialScale;
      smoke3.current.scale.z = initialScale;
    }

    smoke4.current.position.z += positionFactor;
    smoke4.current.scale.x -= scaleFactor;
    smoke4.current.scale.y -= scaleFactor;
    smoke4.current.scale.z -= scaleFactor;
    if (smoke4.current.position.z >= resetLimit) {
      smoke4.current.position.z = initialPosition;
      smoke4.current.scale.x = initialScale;
      smoke4.current.scale.y = initialScale;
      smoke4.current.scale.z = initialScale;
    }
  });

  function Smoke(props) {
    const radius = props.radius || 1; // Default radius is 1
    const { refSmoke } = props;

    const geometry = new SphereGeometry(radius, 32, 32);
    const material = new MeshStandardMaterial({ color: 0xcccccc }); // Grey color

    return (
      <mesh ref={refSmoke} geometry={geometry} material={material} {...props} />
    );
  }

  return (
    <group {...props} dispose={null} ref={props.refPlane}>
      <Smoke scale={0.6} position={[0, 2, 7]} refSmoke={smoke1} />
      <Smoke scale={0.4} position={[0, 2, 9]} refSmoke={smoke2} />
      <Smoke scale={0.2} position={[0, 2, 11]} refSmoke={smoke3} />
      <Smoke scale={0.1} position={[0, 2, 13]} refSmoke={smoke4} />
      <mesh
        geometry={nodes['Fuselage_Cube003-Mesh'].geometry}
        material={materials.White}
      />
      <mesh
        geometry={nodes['Fuselage_Cube003-Mesh_1'].geometry}
        material={materials.Red}
      />
      <mesh
        geometry={nodes['Fuselage_Cube003-Mesh_2'].geometry}
        material={materials.Gray}
      />
      <mesh
        geometry={nodes['Fuselage_Cube003-Mesh_3'].geometry}
        material={materials.Black}
      />
    </group>
  );
}

useGLTF.preload('./models/SmallAirplane-transformed.glb');
